TestNG (default) olarak @Test
methodlarıni alfabetik sıraya göre run
eder. (Yukardan asagi degil!)

➢ priority annotation Testlere öncelik
vermek için kullanılır. Kucuk olan Numara
daha once calisir

➢ priority yazmayan Test method’u varsa
priority= 0 kabul edilir, siralama buna
gore yapilir

        SOFTASSERT
        Softassert'un hata bulsa bile calismaya devam etme ozelligi
        assertAll()'a kadardir.
        Eger assertAll()'da failed rapor edilirse calisma durur
        ve class'in kalan kismi calistirilmaz
        (Yani assertAll hardAsserdeki her bir assert gibidir, hatayi yakalarsa calisma durur)

        POM
        POM'de Driver icin TestBase class'ina extends etmek yerine
        Driver class'indan static method'lar kullanarak    driver olusturup,
        ilgili ayarlarin yapilmasi    ve en sonda driver'in kapatilmasi tercih edilmistir.
        POM'de Driver class'indaki getDriver()'nin obje olusturularak kullanilmasini    engellemek icin
        Singleton pattern kullanimi benimsenmistir.
         Singleton Pattern : tekli kullanim, bir class'in farkli class'lardan
         obje olusturularak kullanimini engellemek icin kullanilir.
         Bunu saglamak icin yapmamiz gereken sey oldukca basit
         obje olusturmak icin kullanilan constructor'i private yaptiginizda
         bsaka class'larda Driver class'indan obje olusturulmasi mumkun OLAMAZ
         POM'da artik inheritance yerine object ve static kullanarak methodlara ulasiyoruz
         page classina objeyle
         driver classina static ile ulasiriz

         Page Object Model'i neden kullanırız?(POM)
         1- Tekrarlardan kurtuluruz
         2- Daha az kod daha çok iş
         3- Kolayca update yapabilme


       PRIORITY
        TestNG test method'larini isim sirasina gore calistirir
         eger isim siralamasinin disinda bir siralama ile calismasini isterseniz
        o zaman test method'larina oncelik (priority) tanimlayabiliriz
        priority kucukten buyuge gore calisir
        eger bir test method'una priority degeri atanmamissa
        default olarak priority=0 kabul edilir.

        Public olarak tanımlanan öğeye kod bloğunun içinden ve dışından erişebilir,
        yani her yerden ulaşılabilir denilebilir. Statik tanımlaması yapıldığında ise
        bu sınıfa herhangi bir nesne oluşturmadan, sadece adıyla çağırıp erişim sağlanabilir.